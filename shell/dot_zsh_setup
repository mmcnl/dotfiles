# -*- mode: shell-script -*-

############ zsh options ############

unsetopt correct
unsetopt correct_all
export DISABLE_CORRECTION="true"

# https://unix.stackexchange.com/a/33995
# in interactive shell, make # function like a comment
setopt interactivecomments

# don't prompt when redirecting output with >
# http://unix.stackexchange.com/a/212135
setopt clobber

# http://zsh.sourceforge.net/Doc/Release/Options.html
setopt HIST_IGNORE_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE

# explicitly set zsh to use emacs mode -- otherwise it may automatically set zle
# to vi mode if it detects the vi string in EDITOR var. see
# http://zsh.sourceforge.net/Guide/zshguide04.html
bindkey -e

# allow easier help for zsh builtins, this allows for `run-help cd`
unalias run-help
autoload -Uz run-help

# https://zhimingwang.org/blog/2015-09-21-zsh-51-and-bracketed-paste.html
# fixes eg pasting in URLs to curl
autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

# https://github.com/zsh-users/zsh-autosuggestions/issues/141#issuecomment-210615799
# prevent slowdowns with bracketed-paste-magic
zstyle ':bracketed-paste-magic' active-widgets '.self-*'

# allow editing current line in $EDITOR
# https://unix.stackexchange.com/a/34251
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# http://www.smallbulb.net/2018/797-zsh-completion-with-visual-hints
expand-or-complete-with-dots() {
  echo -n "\e[31m...\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

############ zsh env vars ############

# https://unix.stackexchange.com/questions/111718/command-history-in-zsh
export HISTFILE="$HOME/.zhistory"

# keep history to reasonable size for quick loading
export HISTSIZE=7000
export SAVEHIST=$HISTSIZE

# http://stackoverflow.com/a/11200998/1163042
export WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

############ zsh completion ############

# enable shift-tab for completion menus - https://unix.stackexchange.com/a/84869
zmodload zsh/complist
bindkey -M menuselect '^[[Z' reverse-menu-complete # shift-tab

# enable home-key navigation of menus
bindkey -M menuselect "^j" complete-word
bindkey -M menuselect "^k" reverse-menu-complete
bindkey -M menuselect "^l" forward-char
bindkey -M menuselect "^h" backward-char

############ zsh highlights ############

# https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/pattern.md
ZSH_HIGHLIGHT_PATTERNS+=('rm -rf' 'fg=white,bold,bg=red')
typeset -gA ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[alias]='fg=cyan'
zle_highlight=(paste:fg=blue)

############ fasd ############

# https://github.com/clvv/fasd
fasd_cache="$HOME/.fasd-init-zsh"
if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
    fasd --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install >| "$fasd_cache"
fi
source "$fasd_cache"

############ fzf ############

if test -f /usr/local/opt/fzf/shell/key-bindings.zsh; then
    alias fzh='rg --no-filename --color=never --sort path . ~/.zlogs | fzf --tac --no-sort'
    export FZF_DEFAULT_OPTS='--border --exact --height 60% --algo=v1 --no-mouse'
    export FZF_DEFAULT_COMMAND='fd --type f'
    # https://github.com/junegunn/fzf/pull/1940
    export FZF_HIST_FIND_NO_DUPS=on

    # load fzf bindings from homebrew installation
    source "/usr/local/opt/fzf/shell/key-bindings.zsh"
else
    echo "$0: fzf not loaded"
fi

if type compdef > /dev/null && type ansible-playbook > /dev/null
then
    # disable ansible-playbook completions since they prevent normal filename
    # completions, which are actually much more useful for this command
    compdef -d ansible-playbook
fi

############ zsh prompt ############

# for each command invocation, save date, current dir, and command in ~/.zlogs/
# inspired by https://spin.atomicobject.com/2016/05/28/log-bash-history/
[ -d "$HOME/.zlogs" ] || echo "$0: ~/.zlogs/ not present!"
export PROMPT_COMMAND='if [ "$(id -u)" -ne 0 ]; then echo "$(date "+%Y-%m-%d %H:%M:%S") $(pwd) $(fc -ln -1)" >> ~/.zlogs/zhistory-$(date "+%Y-%m-%d").log; fi'

precmd() {
    eval "$PROMPT_COMMAND"
    # work around trailing newlines being swallowed by command substitution
    # http://stackoverflow.com/a/15184414/1163042
    # add newline only if non-null
    gp=$(git_prompt)
    # vp=$(virtualenv_prompt)
    extra="$gp$vp"
    [[ -n $extra ]] && extra=$extra$'\n'
    PROMPT="${NEWLINE}${extra}%F{green}%~ %f%(!.#.‚ùØ) "
}
