" -*- mode: vimrc -*-

set nocompatible
syntax on
filetype plugin indent on
set history=2000
set updatetime=500
set autoread " reload files changed outside of Vim
set hidden " allow buffers to persist when unloaded
set relativenumber
set confirm " prompt to save files

""""""""""""""""""""""""""""""""""""""""""""" status line
" always show
set laststatus=2
" abbreviate status line messages; don't show intro or swp file warnings
set shortmess+=atIA
" let &statusline='%<[%{&ft}]  %F  %m  %=%2c %3l/%L   %{strftime("%l:%M")} '
let &statusline='%<[%{&ft}]  %F  %m  %=%2c %3l/%L '

" change the status line based on mode
au InsertEnter * hi statusline ctermfg=blue
au InsertLeave * hi statusline ctermfg=0
hi statusline ctermfg=0

""""""""""""""""""""""""""""""""""""""""""""" search
set ignorecase
set smartcase
set incsearch
set nohlsearch
nnoremap <silent> <CR> :nohlsearch<CR>mq<CR>`q

nnoremap <leader>sr :%s//g<left><left>
vnoremap <leader>sr :s//g<left><left>

nnoremap <leader>/ :Ag! ''<left>

""""""""""""""""""""""""""""""""""""""""""""" basic editing
set nowrap
set softtabstop=2
set tabstop=2
set shiftwidth=2
set expandtab

" http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
" don't lose ability to undo word deletion
inoremap <c-w> <c-g>u<c-w>

" emacs style editing for insert mode
inoremap <C-k> <ESC>lDa
inoremap <C-a> <C-o>^
inoremap <C-e> <C-o>$
inoremap <C-d> <C-o>x
inoremap <C-f> <right>
inoremap <C-b> <left>

" break line but stay in normal mode
nnoremap <C-j> i<CR><esc>
" duplicate lines
nmap <leader>yy mz"qyy"qP`z
vmap <leader>yy mz"qy"qP`z

""""""""""""""""""""""""""""""""""""""""""""" command line completion
set wildmenu
set wildmode=longest,full
set completeopt=longest,menuone,preview
set complete-=d,i

""""""""""""""""""""""""""""""""""""""""""""" whitespace
set list
set listchars=tab:▸\ ,trail:·,extends:▸

" indent buffer
nnoremap <leader>j= mzgg=G`z

""""""""""""""""""""""""""""""""""""""""""""" quickly add blank lines
" mimic unimpaired...
" add blank line above
nnoremap [<Space> mmI<CR><ESC>
" add blank line below
nnoremap ]<Space> mmo<ESC>`m

""""""""""""""""""""""""""""""""""""""""""""" abbreviations
abbr pryy  binding.pry
abbr ipdb  from ipdb import set_trace; set_trace()

""""""""""""""""""""""""""""""""""""""""""""" escape
" inspired by https://github.com/syl20bnr/evil-escape
inoremap fd <Esc>
vnoremap fd <Esc>
cnoremap fd <C-C><Esc>

""""""""""""""""""""""""""""""""""""""""""""" leader
" inspired by https://github.com/syl20bnr/spacemacs
let mapleader = "\<Space>"
set timeoutlen=500

""""""""""""""""""""""""""""""""""""""""""""" buffers
" switch to previous buffer
nnoremap <leader><tab> <C-^>
" buffer list
nnoremap <leader>bb :buffers<CR>:b<space>
" close current buffer
nnoremap <leader>bd :bdelete<CR>

""""""""""""""""""""""""""""""""""""""""""""" quitting
nnoremap <leader>qs :xa<CR> " save all and quit
nnoremap <leader>qq :qa<CR> " quit, ask if save needed
nnoremap <leader>qQ :qa!<CR> " quit without saving

""""""""""""""""""""""""""""""""""""""""""""" files
nnoremap <leader>ff :e<Space>
nnoremap <leader>fs :w<CR> " save file

""""""""""""""""""""""""""""""""""""""""""""" netrw
let g:netrw_liststyle=0
let g:netrw_banner = 0
nnoremap <leader>fj :Explore<CR>
nnoremap <leader>fk :Explore<CR>

" http://stackoverflow.com/a/29457190/1163042
autocmd VimEnter * com! -nargs=* -bar -bang -count=0 -complete=dir  Explore execute "call netrw#Explore(<count>,0,0+<bang>0,<q-args>)" . ' | call SearchNetrw(' . string(expand('%:t')) . ')'

function! SearchNetrw(fname)
    if ! search('\V\^' . a:fname . '\$')
        call search('^' . substitute(a:fname, '\w\zs.*', '', '') . '.*\/\@<!$')
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""" misc toggles
nnoremap <leader>tn :set relativenumber!<CR>
nnoremap <leader>tl :set wrap!<CR>

""""""""""""""""""""""""""""""""""""""""""""" windows and splits
set splitbelow
set splitright
nnoremap <leader>wo :only<CR>
nnoremap <leader>wm :only<CR>
nnoremap <leader>wd :close<CR>
nnoremap <leader>ws :split<CR>
nnoremap <leader>wv :vsplit<CR>
nnoremap <leader>wh <C-w>h
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wl <C-w>l

""""""""""""""""""""""""""""""""""""""""""""" visual theming
highlight LineNr ctermfg=darkgrey

""""""""""""""""""""""""""""""""""""""""""""" navigation
" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

runtime macros/matchit.vim " extended % switching

""""""""""""""""""""""""""""""""""""""""""""" ex
" quickly search for previous Ex commands
nnoremap <S-Up> :<C-p>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""" external code """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" from https://github.com/tpope/vim-unimpaired/blob/master/plugin/unimpaired.vim
function! s:Move(cmd, count, map) abort
  normal! m`
  silent! exe 'move'.a:cmd.a:count
  norm! ``
  silent! call Repeatset("\<Plug>unimpairedMove".a:map, a:count)
endfunction

nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'Up')<CR>
nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'Down')<CR>

nmap [e <Plug>unimpairedMoveUp
nmap ]e <Plug>unimpairedMoveDown

nmap <C-p> <Plug>unimpairedMoveUp
nmap <C-n> <Plug>unimpairedMoveDown

""""""""""""""""""""""""""""""""""""""""""""""""""""

" toggle comments - modified from http://stackoverflow.com/a/24652257/1163042
autocmd FileType c,cpp,java      let b:comment_leader = '\/\/'
autocmd FileType sh,ruby,python  let b:comment_leader = '#'
autocmd FileType conf,fstab      let b:comment_leader = '#'
autocmd FileType vim             let b:comment_leader = '"'
autocmd FileType lisp            let b:comment_leader = ';;'

function! ToggleComment()
" help with :h \v or pattern-atoms
  if !exists("b:comment_leader")
    let b:comment_leader = '#'
  endif
    if getline('.') =~ '\v^\s*' .b:comment_leader
      " uncomment the line
      execute 'silent s/\v^\s*\zs' .b:comment_leader.'[ ]?//g'
    else
      " comment the line
      execute 'silent s/\v^\s*\zs\ze(\S|\n)/' .b:comment_leader.' /g'
    endif
endfunction

nnoremap <leader>; :call ToggleComment()<cr>
vnoremap <leader>; :call ToggleComment()<cr>

